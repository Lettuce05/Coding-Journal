<---------------------------------SQL vs NOSQL--------------------------------->

<<------------------------------------SQL------------------------------------->>

NOTE: Structured Query Language
NOTE: Examples: MySQL, PostgreSQL
NOTE: Relational - Separate tables that you can then define the relationship
between the tables
NOTE: Hard to Scale - File continues to get bigger, needing more resources to
process

<<<--------------------------------Structure--------------------------------->>>
Similar to an excel spreadsheet

//---------------Example---------------//

First Name  Last Name  Address          Email
John        Doe        32 Cherry Blvd   Null
Angela      Yu         12 Sunset Drive  angela@gmail.com
Jack        Bauer      Null             Null

NOTE: If there is no data for a cell, SQL will give it a Null value

//---------------End of Example---------------//

<<-----------------------------------NOSQL------------------------------------>>

NOTE: Not only Structured Query Language
NOTE: Examples: mongoDB, redis
NOTE: Non-Relational - (For Relationships)You would have to set up different documents that could
then have references to eachother
NOTE: Very Scalable - data can be distributed

<<<--------------------------------Structure--------------------------------->>>
JSON Objects

//---------------Example---------------//

{
first_name: "John",
last_name: "Doe",
address: "32 Cherry Blvd"
}
{
first_name: "Angela",
last_name: "Yu",
address: "12 Sunset Drive",
email: "angela@gmail.com"
}
{
first_name: "Jack",
last_name: "Bauer",
}

NOTE: An object can have an extra key-value pair and it will not affect the rest
of the records

//---------------End of Example---------------//


<<---------------------Direct Comparison and Pros and Cons-------------------->>

          MySQL                      MongoDB
      More Mature                    Newer
      Very Stable                    Not as Stable(still under development)
      Requires a Schema              Flexible to Changes
      Great with Relationships       Not Great with Complex Relationships
      (Much faster at Querying)      (Slows down when many things are linked)
      Scales Vertically              Horizontally Scalable
      (More infastructure)           (Easily Scalable)
      (More costly)                  (Cheaper)
                                     (Data can be distributed)
