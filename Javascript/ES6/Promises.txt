<---------------------------------- Promises ---------------------------------->

A promise in Javascript is exactly what it sounds like, you are making a promise
to do something and when the function(task) completes you either fulfill or fail
to fulfill the promise

//-------------------- Example --------------------//

const myPromise = new Promise((resolve, reject) => {

});

//-------------------- End of Example --------------------//

<<----------------------------- Resolve and Reject --------------------------->>

Resolve and Reject are used to decide whether a promise is fulfilled or rejected
(Handling Success and Failure)

//-------------------- Example --------------------//

const myPromise = new Promise((resolve, reject) => {
  if(condition here) {
    resolve("Promise was fulfilled");
  } else {
    reject("Promise was rejected");
  }
});

//-------------------- End of Example --------------------//

//-------------------- Example 2 --------------------//

const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer represents a response from a server
  let responseFromServer;

  if(responseFromServer) {
    resolve("Server request succeeded.")
  } else {
    reject("Server request was rejected.")
  }
});

//-------------------- End of Example 2 --------------------//

<<--------------------------------- Then method ------------------------------>>

The then method is used or is executed when a promised is fulfilled(resolved)

the then method takes a callback function and the parameter is the argument given
to the resolve method

//-------------------- Example --------------------//

const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer is set to true to represent a successful response from a server
  let responseFromServer = true;

  if(responseFromServer) {
    resolve("We got the data");
  } else {
    reject("Data not received");
  }
});

makeServerRequest.then(result => {
  console.log(result);
});

//-------------------- End of Example --------------------//

<<-------------------------------- Catch method ------------------------------>>

The Catch method is used or executed when a promise fails or is rejected
(Handling failure)

The Catch method takes a call back function and the parameter is the argument
passed in to the reject method

//NOTE: the then and catch methods can be chained to the promise declaration

//-------------------- Example --------------------//

const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer is set to false to represent an unsuccessful response from a server
  let responseFromServer = false;

  if(responseFromServer) {
    resolve("We got the data");
  } else {
    reject("Data not received");
  }
});

makeServerRequest.then(result => {
  console.log(result);
});

makeServerRequest.catch(error => {
  console.log(error);
});

//-------------------- End of Example --------------------//

//-------------------- Example 2 --------------------//

//NOTE: This is an example of the then and catch methods being chained to the
promise declaration

const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer is set to false to represent an unsuccessful response from a server
  let responseFromServer = false;

  if(responseFromServer) {
    resolve("We got the data");
  } else {
    reject("Data not received");
  }
})

.then(result => {
  console.log(result);
})

.catch(error => {
  console.log(error);
});

//-------------------- End of Example 2 --------------------//
